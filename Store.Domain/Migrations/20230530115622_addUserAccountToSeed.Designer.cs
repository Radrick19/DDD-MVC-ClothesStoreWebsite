// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Store.Domain;

#nullable disable

namespace Store.Domain.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20230530115622_addUserAccountToSeed")]
    partial class addUserAccountToSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Store.Domain.Models.ManyToManyProductEntities.CollectionProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId", "CollectionId")
                        .IsUnique();

                    b.ToTable("CollectionsProducts");
                });

            modelBuilder.Entity("Store.Domain.Models.ManyToManyProductEntities.ColorProduct", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("ColorId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId", "ColorId")
                        .IsUnique();

                    b.ToTable("ColorsProducts");
                });

            modelBuilder.Entity("Store.Domain.Models.ManyToManyProductEntities.ProductSize", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "SizeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.HasIndex("ProductId", "SizeId")
                        .IsUnique();

                    b.ToTable("ProductsSizes");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Мы знаем, что хороший гардероб всегда должен развиваться в стремлении к лучшему. Мы знаем, что даже самые простые предметы всегда способны быть улучшенными. И мы знаем, что наша преданность инновациям жизни означает, что сосредоточиться на том, что будет дальше, является ключом к прогрессу.",
                            DisplayName = "Женщины",
                            Name = "women",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Мы знаем, что хороший гардероб всегда должен развиваться в стремлении к лучшему. Мы знаем, что даже самые простые предметы всегда способны быть улучшенными.",
                            DisplayName = "Мужчины",
                            Name = "men",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Мы понимаем, что по мере того, как маленькие растут, меняются и развиваются, вы должны убедиться, что их гардероб делает то же самое, чтобы не отставать. Исследуйте самые последние дополнения к диапазонам Qlouni для детей и детей",
                            DisplayName = "Дети",
                            Name = "kids",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Магазин Нового прибытия онлайн. Показывая последние коллекции и релизы от Qlouni",
                            DisplayName = "Младенцы",
                            Name = "baby",
                            Order = 4
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.ClothingCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ClothingCollections");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Hex")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("AdditionalPictures")
                        .HasColumnType("text[]");

                    b.Property<string>("Article")
                        .HasColumnType("text");

                    b.Property<string>("CareInstuctions")
                        .HasColumnType("text");

                    b.Property<int>("CountOfTrasitions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("MainPicture")
                        .HasColumnType("text");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Article")
                        .IsUnique();

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Xxxs",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Xxs",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xs",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "S",
                            Order = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "M",
                            Order = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "L",
                            Order = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Xl",
                            Order = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Xxl",
                            Order = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Xxxl",
                            Order = 9
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanReturn")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Store.Domain.Models.PromoPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("PictureLink")
                        .HasColumnType("text");

                    b.Property<string>("PromoLink")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PromoPages");
                });

            modelBuilder.Entity("Store.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@admin.com",
                            Guid = new Guid("ab331490-b84f-47d9-9276-8a821944b1fe"),
                            IsEmailConfirmed = true,
                            Login = "admin",
                            Password = "ZlkHh6U5OhuqN08dKpvcVl+6ab+qJ400+QMu/T48+Og=",
                            RegistrationDate = new DateTime(2023, 5, 30, 11, 56, 22, 261, DateTimeKind.Utc).AddTicks(7689),
                            Salt = "6028927",
                            UserRole = "Administrator"
                        });
                });

            modelBuilder.Entity("Store.Domain.Models.UserEmailConfirmationHash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmationHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserConfirmationHashes");
                });

            modelBuilder.Entity("Store.Domain.Models.ManyToManyProductEntities.CollectionProduct", b =>
                {
                    b.HasOne("Store.Domain.Models.ProductEntities.ClothingCollection", "Collection")
                        .WithMany("Products")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("Collections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Domain.Models.ManyToManyProductEntities.ColorProduct", b =>
                {
                    b.HasOne("Store.Domain.Models.ProductEntities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("Colors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Domain.Models.ManyToManyProductEntities.ProductSize", b =>
                {
                    b.HasOne("Store.Domain.Models.ProductEntities.Product", "Product")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Domain.Models.ProductEntities.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Product", b =>
                {
                    b.HasOne("Store.Domain.Models.ProductEntities.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Subcategory", b =>
                {
                    b.HasOne("Store.Domain.Models.ProductEntities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Store.Domain.Models.UserEmailConfirmationHash", b =>
                {
                    b.HasOne("Store.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.ClothingCollection", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Product", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Colors");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("Store.Domain.Models.ProductEntities.Size", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
